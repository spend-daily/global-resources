AWSTemplateFormatVersion: "2010-09-09"
Description: Global stack for Spend Daily

Parameters:
  GitHubRepo:
    Type: String
    Default: "global-resources"

  GitHubBranch:
    Type: String
    Default: "master"

  GitHubToken:
    Type: String
    Default: "deadbeef"

  GitHubUser:
    Type: String
    Default: "spend-daily"

  GlobalStack:
    Type: String
    Default: global-stack

  GlobalDataBaseUser:
    Type: String
    Default: admin

  GlobalDataBasePassword:
    Type: String
    Default: password

Resources:
  GlobalStackPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - iam:*
              - cloudformation:*
              - codepipeline:*
              - codebuild:*
              - ec2:*
              - lambda:*
              - rds:*
              - s3:*
      ManagedPolicyName: global-stack-cloudformation-policy

  GlobalStackRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref GlobalStackPolicy

  GlobalBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: global-code-build-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - cloudformation:*
                  - codebuild:*
                  - iam:*
                  - lambda:*

  GlobalPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: global-pipeline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${GlobalArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning

  GlobalVpcPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - ec2:DescribeInstances
              - ec2:CreateNetworkInterface
              - ec2:AttachNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - autoscaling:CompleteLifecycleAction
      ManagedPolicyName: global-vpc-policy

  GlobalArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  GlobalBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - aws cloudformation package --template-file cloud-template.yaml --s3-bucket "${BUILD_BUCKET}" --output-template-file cloud-formation.yaml
          artifacts:
            files:
              - cloud-formation.yaml
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:6.3.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Ref AWS::StackName
      ServiceRole: !Ref GlobalBuildRole

  GlobalPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: GlobalPipeline
      RoleArn: !GetAtt GlobalPipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref GlobalArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCode
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
            - Name: SourceConfiguration
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: spend-daily-stack-configurations
                S3ObjectKey: global-resources-cloud-configuration.zip
              OutputArtifacts:
                - Name: CloudConfiguration
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref GlobalBuildProject
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: CloudFormation
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_NAMED_IAM
                ChangeSetName: GlobalChangeSet
                RoleArn: !GetAtt GlobalStackRole.Arn
                StackName: !Ref GlobalStack
                TemplateConfiguration: CloudConfiguration::cloud-configuration.json
                TemplatePath: CloudFormation::cloud-formation.yaml
              InputArtifacts:
                - Name: CloudFormation
                - Name: CloudConfiguration
              RunOrder: 1
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: GlobalChangeSet
                RoleArn: !GetAtt GlobalStackRole.Arn
                StackName: !Ref GlobalStack
              RunOrder: 2

  GlobalVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true

  GlobalSubnetWest2a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref GlobalVPC

  GlobalSubnetWest2b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref GlobalVPC

  GlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: GlobalSecurityGroup
      GroupDescription: Access to the Globa VPC
      VpcId: !Ref GlobalVPC

  GlobalDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: A security group for databases
      SubnetIds:
        - !Ref GlobalSubnetWest2a
        - !Ref GlobalSubnetWest2b

  GlobalDataBase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 10
      AvailabilityZone: us-west-2a
      BackupRetentionPeriod: 7
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: spend-global
      DBName: spend
      DBSubnetGroupName: !Ref GlobalDBSubnetGroup
      Engine: postgres
      EngineVersion: 9.6.3
      MasterUsername: !Ref GlobalDataBaseUser
      MasterUserPassword: !Ref GlobalDataBasePassword
      PubliclyAccessible: false
      VPCSecurityGroups:
      - !Ref GlobalSecurityGroup

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${GlobalPipeline}

  GitHubToken:
    Description: GitHub authentication token
    Value: !Ref GitHubToken
    Export:
      Name: spend-daily-github-token

  GlobaDataBaseAddress:
    Description: Address for the global DB
    Value:
      Fn::GetAtt:
        - GlobalDataBase
        - Endpoint.Address
    Export:
      Name: spend-daily-global-db-address

  GlobaDataBasePort:
    Description: Port for the global DB
    Value:
      Fn::GetAtt:
        - GlobalDataBase
        - Endpoint.Port
    Export:
      Name: spend-daily-global-db-port

  GlobaDataBaseUser:
    Description: User for the global DB
    Value: !Ref GlobalDataBaseUser
    Export:
      Name: spend-daily-global-db-user

  GlobaDataBasePassword:
    Description: Password for the global DB
    Value: !Ref GlobalDataBasePassword
    Export:
      Name: spend-daily-global-db-password

  GlobalStackRoleArn:
    Description: Role that can be used for Stacks
    Value: !GetAtt GlobalStackRole.Arn
    Export:
      Name: spend-daily-global-stack-role-arn

  GlobalBuildRole:
    Description: Role that can be used for Builds
    Value: !Ref GlobalBuildRole
    Export:
      Name: spend-daily-global-build-role

  GlobalPipelineRoleArn:
    Description: Role that can be used for Pipelines
    Value: !GetAtt GlobalPipelineRole.Arn
    Export:
      Name: spend-daily-global-pipeline-role-arn

  GlobalArtifactBucket:
    Description: Bucket that should be used for Pipelines and such
    Value: !Ref GlobalArtifactBucket
    Export:
      Name: spend-daily-global-artifact-bucket

  GlobalSecurityGroup:
    Description: Security Group that should be used for internal services
    Value: !GetAtt GlobalSecurityGroup.GroupId
    Export:
      Name: spend-daily-global-security-group-id

  GlobalSubnetWest2a:
    Description: Subnet for default internal services
    Value: !Ref GlobalSubnetWest2a
    Export:
      Name: spend-daily-global-subnet-us-west-2a

  GlobalSubnetWest2b:
    Description: Subnet for default internal services
    Value: !Ref GlobalSubnetWest2b
    Export:
      Name: spend-daily-global-subnet-us-west-2b

  GlobalVpcPolicy:
    Description: A global policy that allows services to attach VPCs
    Value: !Ref GlobalVpcPolicy
    Export:
      Name: spend-daily-global-vpc-policy
